<Heading Level="HeadingLevel.H2">Toast Component</Heading>

<Paragraph>
    The <code>Toast</code> component creates lightweight, customizable alert notifications.
</Paragraph>

<DocsSection ComponentName="Toast" />


@code {
    Spacing headingTopMargin = Spacing.Five;
    Toast toast1;
    Toast toast2;
    Toast toast3;

    Toast toast4;
    Toast toastShow;
    Toast toastShown;
    Toast toastHide;
    Toast toastHidden;
}


<Heading Id="auto-hide" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="@headingTopMargin">Automatic Hiding</Heading>
<Paragraph>
    By default, toasts hide automatically after 5 seconds.
</Paragraph>

<Button Color="NamedColor.Primary" IsOutline="true" Clicked="async () => await this.toast1.ShowAsync()">Show toast</Button>
<Toast @ref="this.toast1" Header="Auto-Hiding Toast" Subheader="in 5 seconds..." ShowHide="false">This toast will self-destruct in 5 seconds...</Toast>


<Heading Id="manual-hide" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="@headingTopMargin">Manual Hiding</Heading>
<Paragraph>
    Toasts can also be configured to require that the user manually dismisses the toast.
</Paragraph>

<Button Color="NamedColor.Primary" IsOutline="true" Clicked="async () => await this.toast2.ShowAsync()">Show toast</Button>
<Toast @ref="this.toast2" Header="Manual Toast" AutoHide="false">This toast must be manually dismissed.</Toast>


<Heading Id="custom-hide" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="@headingTopMargin">Custom Hiding</Heading>
<Paragraph>
    You can also hide a toast in response to an external event, for instance the click of a button.
</Paragraph>

<Button Color="NamedColor.Primary" IsOutline="true" Clicked="async () => await this.toast3.ShowAsync()">Show toast</Button>
<Button Color="NamedColor.Secondary" IsOutline="true" Clicked="async () => await this.toast3.HideAsync()">Hide toast</Button>
<Toast @ref="this.toast3" Header="Custom Hiding" AutoHide="false" ShowHide="false">This toast will hide when you click the hide button above.</Toast>


<Heading Id="handling-events" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="@headingTopMargin">Handling Events</Heading>
<Paragraph>
    The <code>Toast</code> component supports the <code>OnShow</code>, <code>OnShown</code>, <code>OnHide</code> and <code>OnHidden</code> events.
    Click the button below to to show a toast and view all its associated events as toasts.
</Paragraph>

<Heading Level="HeadingLevel.H4">Events</Heading>
<Toast @ref="this.toastShow" ShowHide="false" Delay="2000"><code>Toast.OnShow</code></Toast>
<Toast @ref="this.toastShown" ShowHide="false" Delay="2000"><code>Toast.OnShown</code></Toast>
<Toast @ref="this.toastHide" ShowHide="false" Delay="2000"><code>Toast.OnHide</code></Toast>
<Toast @ref="this.toastHidden" ShowHide="false" Delay="2000"><code>Toast.OnHidden</code></Toast>

<Button Color="NamedColor.Primary" IsOutline="true" Clicked="async () => await this.toast4.ShowAsync()">Show toast</Button>
<Toast @ref="this.toast4" Header="Sample Toast" ShowHide="false" AutoHide="true" Delay="5000" OnShow="() => this.toastShow.Show()" OnShown="() => this.toastShown.Show()" OnHide="() => this.toastHide.Show()" OnHidden="() => this.toastHidden.Show()">
    This toast will trigger all associated events during its lifetime.
</Toast>

