
<Heading Level="HeadingLevel.H2">Carousels</Heading>
<Paragraph>
    The <code>Carousel</code> component provides slideshow features for cycling through elements.
</Paragraph>


<DocsSection ComponentName="Carousel" />


@code {
    Carousel c1;

    string[] imgArr = new string[]
    {
        "https://images.unsplash.com/photo-1546519638-68e109498ffc?w=1024",
        "https://images.unsplash.com/photo-1519861531473-9200262188bf?w=1024",
        "https://images.unsplash.com/photo-1516684378628-240d2c5237f5?w=1024",
        "https://images.unsplash.com/photo-1504450758481-7338eba7524a?w=1024",
        "https://images.unsplash.com/photo-1474224017046-182ece80b263?w=1024",
        "https://images.unsplash.com/photo-1538405505827-e519f0efb68e?w=1024"
    };

    bool showControls = true;
    bool showIndicators = true;
    bool autoStart = true;
    int interval = 3000;

    string latestEvent;

    CarouselTransitionType transitionType = CarouselTransitionType.Slide;
}

<Heading Level="HeadingLevel.H3">Setting Options</Heading>
<p>
    Use the options below to modify the carousel.
</p>


<Carousel 
          @ref="this.c1" 
          Id="carousel-1" 
          
          Width="ComponentSize.p50" 
          
          ShowControls="@showControls" 
          ShowIndicators="@showIndicators" 
          AutoStart="@autoStart" 
          Interval="@interval"
          TransitionType="@transitionType"
          
          ImageUrls="@imgArr"

          OnSlide='(e) => this.latestEvent = $"Slide - From: {e.From}, To: {e.To}, Direction: {e.Direction}"'
          OnSlid='(e) => this.latestEvent = $"Slid - From: {e.From}, To: {e.To}, Direction: {e.Direction}"'
/>


<Alert Heading="Latest Event" Color="NamedColor.Info" MarginTop="Spacing.Four" Width="ComponentSize.p50">
    @latestEvent
</Alert>

<ButtonToolbar MarginTop="Spacing.Four">
    <ButtonGroup>
        <Button IsActive="@showControls" Color="NamedColor.Primary" IsOutline="@(!showControls)" OnClicked="() => showControls = !showControls">Controls</Button>
        <Button IsActive="@showIndicators" Color="NamedColor.Primary" IsOutline="@(!showIndicators)" OnClicked="() => showIndicators = !showIndicators">Indicators</Button>
    </ButtonGroup>
    <ButtonGroup MarginLeft="Spacing.Three">
        <Button Color="NamedColor.Success" IsOutline="true" OnClicked="() => this.c1.CycleAsync()">Cycle</Button>
        <Button Color="NamedColor.Warning" IsOutline="true" OnClicked="() => this.c1.PauseAsync()">Pause</Button>
    </ButtonGroup>
    <ButtonGroup MarginLeft="Spacing.Three">
        <Button Color="NamedColor.Secondary" IsOutline="true" OnClicked="() => this.c1.PreviousAsync()">&lt;- Prev</Button>
        <Button Color="NamedColor.Secondary" IsOutline="true" OnClicked="() => this.c1.NextAsync()">Next -&gt;</Button>
        <Dropdown>
            <DropdownToggleButton Color="NamedColor.Primary" IsOutline="true">Go to</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Clicked="() => this.c1.GoToSlideAsync(0)">Slide #1</DropdownItem>
                <DropdownItem Clicked="() => this.c1.GoToSlideAsync(1)">Slide #2</DropdownItem>
                <DropdownItem Clicked="() => this.c1.GoToSlideAsync(2)">Slide #3</DropdownItem>
                <DropdownItem Clicked="() => this.c1.GoToSlideAsync(3)">Slide #4</DropdownItem>
                <DropdownItem Clicked="() => this.c1.GoToSlideAsync(4)">Slide #5</DropdownItem>
                <DropdownItem Clicked="() => this.c1.GoToSlideAsync(5)">Slide #6</DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </ButtonGroup>
    <ButtonGroup MarginLeft="Spacing.Three">
        <Button Color="NamedColor.Primary" IsOutline="@(!this.autoStart)" OnClicked="() => this.autoStart = !this.autoStart">Auto-start</Button>
        <Dropdown>
            <DropdownToggleButton Color="NamedColor.Info" IsOutline="true">Interval</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Clicked="() => this.interval = 250">250 ms</DropdownItem>
                <DropdownItem Clicked="() => this.interval = 3000">3000 ms</DropdownItem>
            </DropdownMenu>
        </Dropdown>
        <Dropdown>
            <DropdownToggleButton Color="NamedColor.Info" IsOutline="true">Transition</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Clicked="() => this.transitionType = CarouselTransitionType.Slide">Slide</DropdownItem>
                <DropdownItem Clicked="() => this.transitionType = CarouselTransitionType.Fade">Fade</DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </ButtonGroup>
</ButtonToolbar>
