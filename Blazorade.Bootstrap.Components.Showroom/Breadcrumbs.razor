
<Heading Level="HeadingLevel.H2">Breadcrumb Component</Heading>
<Paragraph>
    The <code>Breadcrumb</code> component visualizes the current page in a navigational hierarchy.
</Paragraph>


<DocsSection ComponentName="Breadcrumb" />


@code {
    List<ILink> items = new List<ILink>()
    {
        new Link(){ Url="javascript:", Text = "Home", Description="The front page of the site" },
        new Link(){ Url="javascript:", Text = "Section 1" },
        new Link(){ Url="javascript:", Text = "Section 1.1" },
        new Link(){ Text = "This page", IsActive = true, Description = "This is your current page. You are here now." }
    };
}

<Heading Id="simple" IsAnchor="true" Level="3" MarginTop="5">Simple</Heading>
<Paragraph>
    A simple <code>Breadcrumb</code> component with no customization.
</Paragraph>
<Breadcrumb Items="this.items" />

<Heading Id="custom-item-template" IsAnchor="true" Level="3" MarginTop="5">Custom Item Template</Heading>
<Paragraph>
    Shows how you can customize each item in the <code>Breadcrumb</code> component by using
    the <code>ItemTemplate</code> template property.
</Paragraph>
<Breadcrumb Items="this.items">
    <ItemTemplate>
        @if (!string.IsNullOrEmpty(context.Url))
        {
            <Button Color="NamedColor.Light" Shadow="Shadow.Regular">@context.Text</Button>
        }
        else
        {
            <Span>@context.Text (@context.Description)</Span>
        }
    </ItemTemplate>
</Breadcrumb>

<Heading Id="background-color" IsAnchor="true" Level="3" MarginTop="5">Background Colors</Heading>
<Paragraph>
    Use the <code>Breadcrumb.BackgroundColor</code> parameter to specify a background for the breadcrumb.
</Paragraph>

<Breadcrumb Items="this.items" BackgroundColor="NamedColor.Info" />
<Breadcrumb Items="this.items" BackgroundColor="NamedColor.Warning" />
<Breadcrumb Items="this.items" BackgroundColor="NamedColor.Transparent" />


<Heading Id="dynamic-items" IsAnchor="true" Level="3" MarginTop="5">Dynamic Items</Heading>
<Paragraph>
    The items on the breadcrumb can be dynamically updated.
</Paragraph>

@code {
    public static List<ILink> defaultDynItems = new List<ILink>
    {
        new Link{Text = "Home"}
    };

    List<ILink> dynItems = new List<ILink>(defaultDynItems);
}

<Breadcrumb Items="this.dynItems" />

<Button Color="NamedColor.Primary" OnClicked="@(() => { this.dynItems.Add(new Link { Text = $"Item #{this.dynItems.Count + 1}" }); })">Add Item</Button>
<Button Color="NamedColor.Warning" OnClicked="@(() => { this.dynItems = new List<ILink>(defaultDynItems); })">Clear</Button>
