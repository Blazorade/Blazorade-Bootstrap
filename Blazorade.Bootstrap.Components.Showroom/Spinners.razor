
<Heading Level="HeadingLevel.H2">Spinner Component</Heading>
<Paragraph>
    The <Anchor Url="https://getbootstrap.com/docs/4.5/components/spinners/" OpenInNewTab="true">Spinner component</Anchor> is used to indicate a loading state of a UI element or page.
</Paragraph>

<DocsSection ComponentName="Spinner" />


<Heading Id="sizes" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="5">Sizes</Heading>
<Paragraph>
    Shows different sizes for spinners.
</Paragraph>

<CardGroup Type="CardGroupType.Deck">
    <Card Title="SpinnerSize.Normal">
        <Spinner Size="SpinnerSize.Normal" />
    </Card>
    <Card Title="SpinnerSize.Small">
        <Spinner Size="SpinnerSize.Small" />
    </Card>
</CardGroup>

<Paragraph>Using inline CSS styles, you can basically specify any size for your spinner.</Paragraph>

<CardGroup Type="CardGroupType.Deck">
    <Card Title="SpinnerType.Border">
        <Spinner Type="SpinnerType.Border" style="width: 8rem; height: 8rem;" />
    </Card>
    <Card Title="SpinnerType.Grow">
        <Spinner Type="SpinnerType.Grow" style="width: 8rem; height: 8rem;" />
    </Card>
</CardGroup>


<Heading Id="types" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="5">Spinner Types</Heading>
<Paragraph>
    Shows different spinner types.
</Paragraph>

<CardGroup Type="CardGroupType.Deck">
    <Card Title="SpinnerType.Border">
        <Spinner Type="SpinnerType.Border" />
    </Card>
    <Card Title="SpinnerType.Grow">
        <Spinner Type="SpinnerType.Grow" />
    </Card>
</CardGroup>


<Heading Id="colors" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="5">Standard Colours</Heading>
<Paragraph>
    Shows different colours for spinners.
</Paragraph>

<CardGroup Type="CardGroupType.Deck">
    <Card Title="SpinnerType.Border">
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Primary" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Secondary" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Success" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Danger" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Warning" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Info" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Light" />
        <Spinner Type="SpinnerType.Border" Color="NamedColor.Dark" />
    </Card>
    <Card Title="SpinnerType.Grow">
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Primary" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Secondary" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Success" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Danger" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Warning" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Info" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Light" />
        <Spinner Type="SpinnerType.Grow" Color="NamedColor.Dark" />
    </Card>
</CardGroup>


<Heading Id="content" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="5">Spinner content</Heading>
<Paragraph>
    You can specify child content with the <code>Spinner</code> component.
</Paragraph>

<CardGroup Type="CardGroupType.Deck">
    <Card Title="Left-aligned content">
        <Spinner ContentAlignment="HorizontalAlignment.Left">
            Loading...
        </Spinner>
    </Card>
    <Card Title="Right-aligned content">
        <Spinner ContentAlignment="HorizontalAlignment.Right">
            Loading...
        </Spinner>
    </Card>
</CardGroup>


<Heading Id="with-buttons" IsAnchor="true" Level="HeadingLevel.H3" MarginTop="5">Spinner and Button</Heading>
<Paragraph>
    You can use the <code>Spinner</code> component with a <code>Button</code> component.
</Paragraph>

@code {
    bool saving = false;
}
<Button Color="NamedColor.Primary" IsDisabled="@this.saving" OnClicked="() => this.saving = !this.saving">
    @if (this.saving)
    {
        <Spinner Size="SpinnerSize.Small" MarginRight="Spacing.S1" />
    }
    <span>Save</span>
</Button>
<Button Color="NamedColor.Secondary" IsOutline="true" OnClicked="() => this.saving = !this.saving">
    Toggle
</Button>
